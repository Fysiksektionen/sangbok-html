user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    server_tokens off;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '[$time_local] - $status - ($http_accept_encoding -> $sent_http_content_encoding) - $remote_addr/$http_x_forwarded_for - $request'
                      # Default value below:
                      # '$remote_addr - [$time_local] "$request" '
                      # '- $status ($sent_http_content_encoding, ${body_bytes_sent}B) '
                      # '- "$http_referer" "$http_x_forwarded_for" "$http_user_agent"';
                      # $request_time, "$sent_http_content_encoding" "$http_accept_encoding"

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65s;

    server {
        # Listen both on ipv4 and ipv6, port 80
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html/;
            index  index.html index.htm;
            rewrite ^/sangbok$ sangbok/ redirect; 

            # I expect most clients to support gzip encoding, hence we can store the static files gzip-compressed
            # and decompress dynamically if the client does not support it.
            # See https://blog.llandsmeer.com/tech/2019/08/29/precompression.html
            gzip on;
            gzip_types text/plain text/xml application/xml application/javascript text/css image/svg+xml image/x-icon; # text/html is enabled by default, so we don't need to enable it explicitly
            gzip_static always;
            gzip_vary on;
            gunzip on;

            # We support dynamic brotli-re-encoding, but not precompression.
            brotli on;
            brotli_types text/plain text/xml application/xml application/javascript text/css image/svg+xml image/x-icon;
            brotli_static off; # We only store gzip:s, not br:s, hence we only use dynamic brotli re-encoding, not pre-compression.

            ##
            ## Caching
            ##
            add_header Cache-Control public;
            
            # Likely, people will use this page for about 3h at a time, so setting the expires to anything less than
            # 3h does not prevent the browser from e.g. requesting non-existent script chunks or sheet music svgs.
            # Just make sure to update the site in the middle of the night instead.
            location ~* index.html$ {
                expires 4h;

                # CSP. Only allows scripts directly from the server. (Makes XSS/JS injection harder).
                add_header Content-Security-Policy "script-src 'self'; font-src 'self' fonts.gstatic.com; media-src 'self'; object-src 'none';";
            }
            location ~* /favicon\.ico {expires 14d;}
            
            # These files have hashed filenames, hence there's no need to ask the server if they have changed
            # since if they have, they will have a different name.
            location ~* \.(?:css|js|min\.svg)$ {expires 1M;} # Generic assets
            location ~* /msvg/.*/\.svg$ {expires 1M;} # Sheet music

            # Non-hashed files
            location ~* \.(?:png|gif|jpg|svg)$ {expires 3d;} # Images
            location ~* \.woff2$ {expires 3M;} # Fonts

            ##
            ## Misc. headers
            ##
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            # add_header Content-Security-Policy "script-src 'self' 'sha256-4RS22DYeB7U14dra4KcQYxmwt5HkOInieXK1NUMBmQI='; font-src 'self' fonts.gstatic.com; media-src 'self';";
            # add_header Strict-Transport-Security max-age=14400;
            
            # Add utf-8 to the content-type header
            charset utf-8;
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
}